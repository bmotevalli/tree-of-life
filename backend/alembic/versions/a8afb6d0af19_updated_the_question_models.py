"""Updated the question models.

Revision ID: a8afb6d0af19
Revises: c7139ce10db8
Create Date: 2025-06-03 10:20:09.389634

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a8afb6d0af19'
down_revision: Union[str, None] = 'c7139ce10db8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_timetable',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('end_date', sa.DateTime(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('question_timetable',
    sa.Column('question_id', sa.UUID(), nullable=False),
    sa.Column('timetable_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['question_id'], ['question.id'], ),
    sa.ForeignKeyConstraint(['timetable_id'], ['user_timetable.id'], ),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_answer',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('question_id', sa.UUID(), nullable=False),
    sa.Column('timetable_id', sa.UUID(), nullable=False),
    sa.Column('day_of_plan', sa.Integer(), nullable=False),
    sa.Column('date_of_plan', sa.Date(), nullable=False),
    sa.Column('answer', sa.JSON(), nullable=True),
    sa.Column('is_submitted', sa.Boolean(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['question_id'], ['question.id'], ),
    sa.ForeignKeyConstraint(['timetable_id'], ['user_timetable.id'], ),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('useranswer')
    op.drop_table('userquestionset')
    op.add_column('question', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('question', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('question', sa.Column('created_by', sa.UUID(), nullable=True))
    op.add_column('question', sa.Column('updated_by', sa.UUID(), nullable=True))
    op.create_foreign_key(None, 'question', 'user', ['created_by'], ['id'])
    op.create_foreign_key(None, 'question', 'user', ['updated_by'], ['id'])
    op.add_column('questiontag', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('questiontag', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('questiontag', sa.Column('created_by', sa.UUID(), nullable=True))
    op.add_column('questiontag', sa.Column('updated_by', sa.UUID(), nullable=True))
    op.create_foreign_key(None, 'questiontag', 'user', ['created_by'], ['id'])
    op.create_foreign_key(None, 'questiontag', 'user', ['updated_by'], ['id'])
    op.add_column('user', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('user', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('user', sa.Column('created_by', sa.UUID(), nullable=True))
    op.add_column('user', sa.Column('updated_by', sa.UUID(), nullable=True))
    op.create_foreign_key(None, 'user', 'user', ['created_by'], ['id'])
    op.create_foreign_key(None, 'user', 'user', ['updated_by'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'user', type_='foreignkey')
    op.drop_constraint(None, 'user', type_='foreignkey')
    op.drop_column('user', 'updated_by')
    op.drop_column('user', 'created_by')
    op.drop_column('user', 'updated_at')
    op.drop_column('user', 'created_at')
    op.drop_constraint(None, 'questiontag', type_='foreignkey')
    op.drop_constraint(None, 'questiontag', type_='foreignkey')
    op.drop_column('questiontag', 'updated_by')
    op.drop_column('questiontag', 'created_by')
    op.drop_column('questiontag', 'updated_at')
    op.drop_column('questiontag', 'created_at')
    op.drop_constraint(None, 'question', type_='foreignkey')
    op.drop_constraint(None, 'question', type_='foreignkey')
    op.drop_column('question', 'updated_by')
    op.drop_column('question', 'created_by')
    op.drop_column('question', 'updated_at')
    op.drop_column('question', 'created_at')
    op.create_table('userquestionset',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('question_ids', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('userquestionset_pkey'))
    )
    op.create_table('useranswer',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('answers', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('useranswer_pkey'))
    )
    op.drop_table('user_answer')
    op.drop_table('question_timetable')
    op.drop_table('user_timetable')
    # ### end Alembic commands ###
